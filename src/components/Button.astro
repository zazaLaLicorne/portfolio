---
interface Props {
  variant?: "default" | "retour" | "validez" | "supprimer";
  type?: "button" | "submit" | "reset";
  href?: string; // si pr√©sent, rend le bouton comme un <a>
  class?: string;
  // On autorise toutes les autres props HTML
  [key: string]: any;
}

const {
  variant = "default",
  type = "button",
  class: extra = "",
  href,
  ...rest
} = Astro.props;

const base =
  "px-4 py-2 rounded-md transition text-grey-900 transform hover:-translate-y-0.5 duration-200 dark:hover:text-gray-800";

const variants: Record<string, string> = {
  default:
    "bg-primaryLight dark:bg-primaryDark hover:bg-secondaryLight dark:hover:bg-primaryLight",
  retour:
    "bg-gray-400 dark:bg-gray-600 hover:bg-gray-500 dark:hover:bg-gray-500",
  validez:
    "bg-green-500 dark:bg-green-600 hover:bg-green-600 dark:hover:bg-green-500",
  supprimer:
    "bg-red-500 dark:bg-red-600 hover:bg-red-600 dark:hover:bg-red-500",
};

const classes = `${base} ${variants[variant]} ${extra}`;
---

{href ? (
  <a href={href} class={classes} {...rest}>
    <slot />
  </a>
) : (
  <button type={type} class={classes} {...rest}>
    <slot />
  </button>
)}
